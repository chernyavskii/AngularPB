<!--
<div class="main-container-documents">
-->
<div class="grid">
  <mat-card style="border: 1px solid black;">
    <mat-card-header>
      <mat-card-title>Мои Документы</mat-card-title>
        <mat-card-subtitle>Создание нового документа</mat-card-subtitle>
    </mat-card-header>

    <mat-card-content style="border: 1px solid red;">
      <mat-vertical-stepper [linear]="true">
        <mat-step  label="Шаг 1"> <!--[stepControl]="firstFormGroup"-->
          <div class="grid__row grid__row--md">
          <mat-form-field class="grid__item">
            <mat-select placeholder="Выбор типа документа" disableRipple>
              <mat-option *ngFor="let typeDoc of typeDocument" [value]="typeDoc.value">
                {{typeDoc.viewValue}}
              </mat-option>
            </mat-select>
          </mat-form-field>
          </div>
        </mat-step>
        <mat-step label="Шаг 2">
            <form [formGroup]="firstFormGroup">
              <div class="grid__row grid__row--md">
              <mat-form-field class="grid__item">
                  <mat-select placeholder="Выбор контрагента" formControlName="agent_id" disableRipple required>
                    <mat-option *ngFor="let agent of allAgents" [value]="agent.id">
                      {{agent.firstName}}
                    </mat-option>
                  </mat-select>
                </mat-form-field>
                </div>
              <div class="grid__row grid__row--md">
              <mat-form-field class="grid__item">
                  <input type="text" matInput placeholder="Название товара"  formControlName="name" required />
                </mat-form-field>
                <mat-form-field class="grid__item">
                  <input matInput placeholder="Цена" type="number"  formControlName="price" required > <!--[(ngModel)]="user.username"-->
                  <span matPrefix>б.р.&nbsp;</span>
                  <span matSuffix>.00</span>
                </mat-form-field>

                <mat-form-field class="grid__item">
                  <mat-select placeholder="Выбор единицы измерения" [formControl]="pokemonControl" required>
                    <mat-optgroup *ngFor="let group of pokemonGroups" [label]="group.name"
                                  [disabled]="group.disabled">
                      <mat-option *ngFor="let pokemon of group.pokemon" [value]="pokemon.value">
                        {{ pokemon.viewValue }}
                      </mat-option>
                    </mat-optgroup>
                  </mat-select>
                </mat-form-field>

                <mat-form-field class="grid__item">
                  <input matInput placeholder="Количество" type="number" formControlName="number">
                  <span matSuffix>шт.&nbsp;</span>
                </mat-form-field>
              </div>

              <div class="grid__row grid__row--md">
              <mat-form-field class="grid__item">
                  <input matInput placeholder="Примечание" type="text" formControlName="note" [(ngModel)]="product.note">
                </mat-form-field>
              </div>
              </form>
        </mat-step>

        <mat-step label="Шаг 3">
          <mat-form-field class="grid__item">
            <input matInput placeholder="test" type="text" [(ngModel)]="product.note">
          </mat-form-field>
          <div>
              <button mat-button (click)="testFunc()">Создать</button>
              <button mat-raised-button color="primary" aria-label="Show an example snack-bar" (click)="savePdf()">Скачать .pdf</button>
              <button mat-raised-button color="primary" aria-label="Show an example snack-bar" (click)="print()">Печать .pdf</button>
            </div>

            <button mat-button (click)="showDocumentInPdf()">Показать</button>

            <div class="testDocDiv">
              <pdf-viewer [src]="pageurl" [original-size]="true" [show-all]="true"></pdf-viewer>
            </div>
          </mat-step>
      </mat-vertical-stepper>
    </mat-card-content>
  </mat-card>
</div>

/*CSS*/
/*
.card-add-new-document {
  border: 1px solid black;
  width: 80%;
  margin: auto;
}
.main-container-documents {
  border: 1px solid black;
}
*/
.grid {
}
.testqqw {
  display: flex;
  flex-direction: column;
}
.grid__row {
  display: flex;
  flex-direction: column;
}
.grid__row_button {
  display: flex;
  float: none;
  flex-direction: column;
}
.grid__item {
  flex: 1;
  padding: 10px;
}

@media all and ( min-width: 940px ) {

  .testQQsds {
    flex-direction: row;
  }

}

@media all and ( min-width: 480px ) {

  .grid__row--sm {
    flex-direction: row;
  }

}
@media all and ( min-width: 480px ) {

  .grid__row--sm_button {
    flex-direction: row;
    float: right;
  }

}

@media all and ( min-width: 769px ) and (min-width: 1025px) {

  .grid__row--md {
    flex-direction: row;
    border: 1px solid blue;
  }

}
@media all and ( min-width: 960px ) {

  .grid__row--lg {
    flex-direction: row;
  }

}
/*
.grid {
  border: solid 1px #e7e7e7;
}

.grid__row {
  display: flex;
  flex-direction: column;
}

.grid__item {
  flex: 1;
  padding: 12px;
  border: solid 1px #e7e7e7;
}
*/

/*TS*/
import {Component, Input, OnInit} from '@angular/core';
import {User} from '../../../models/User';
import {Document} from '../../../models/Document';
import {Product} from '../../../models/Product';

import {FormBuilder, FormControl, FormGroup} from '@angular/forms';
import {DocumentService} from '../../../services/document/document.service';
import {AgentService} from '../../../services/agent/agent.service';

@Component({
  selector: 'app-documents',
  templateUrl: './documents.component.html',
  styleUrls: ['./documents.component.css']
})
export class DocumentsComponent implements OnInit {
  pokemonControl = new FormControl();
  agent_id: number;
  typeDocument = [
    {value: 'value1', viewValue: 'Строгая отчетность'},
    {value: 'value2', viewValue: 'Нестрогая отчетность'}
  ];

  pokemonGroups = [
    {
      name: 'Масса',
      pokemon: [
        { value: 'кг', viewValue: 'килограмм' },
        { value: 'г', viewValue: 'грамм' },
        { value: 'т', viewValue: 'тонна' }
      ]
    },
    {
      name: 'Температура',
      pokemon: [
        { value: 'squirtle-3', viewValue: 'Squirtle' },
        { value: 'psyduck-4', viewValue: 'Psyduck' },
        { value: 'horsea-5', viewValue: 'Horsea' }
      ]
    },
    {
      name: 'Расстояние',
      disabled: true,
      pokemon: [
        { value: 'charmander-6', viewValue: 'Charmander' },
        { value: 'vulpix-7', viewValue: 'Vulpix' },
        { value: 'flareon-8', viewValue: 'Flareon' }
      ]
    },
    {
      name: 'Площадь',
      pokemon: [
        { value: 'mew-9', viewValue: 'Mew' },
        { value: 'mewtwo-10', viewValue: 'Mewtwo' },
      ]
    },
    {
      name: 'Объём',
      pokemon: [
        { value: 'mew-9', viewValue: 'Mew' },
        { value: 'mewtwo-10', viewValue: 'Mewtwo' },
      ]
    }
  ];

  allAgents = [];
  @Input()
  user = new User();
  firstFormGroup: FormGroup;
  pageurl: Uint8Array;
  product = new Product();

  constructor(private _formBuilder: FormBuilder,
              private documentService: DocumentService,
              private agentService: AgentService) {
    this.agentService.getAllAgents()
      .then(data => {
        for (let agent of data) {
          this.allAgents.push(agent);
        }
      })
      .catch(err => {console.log(err); });
  }

  ngOnInit() {
    this.firstFormGroup = this._formBuilder.group({
      name: this.product.name,
      measure: this.product.measure,
      number: this.product.number,
      price: this.product.price,
      note: this.product.note,
      agent_id: this.agent_id
    });
  }

  testFunc(agent_id: number) {
    const saveProduct: Product[] = [{
      name: this.firstFormGroup.value.name,
      measure: this.firstFormGroup.value.measure,
      number: this.firstFormGroup.value.number,
      price: this.firstFormGroup.value.price,
      packageNumber: null,
      weight: null,
      note: this.firstFormGroup.value.note
    }];

    this.documentService.addDocumentTN(this.firstFormGroup.value.agent_id, saveProduct)
      .then(data => {console.log(data); })
      .catch(err => {console.log(err); });
  }

  savePdf() {
    this.documentService.getDocumentByIdInPDF(11, 'tn (15.03.2018 03.31.42)', 'xls');
  }
  print() {
    this.documentService.printDocument(11, 'tn (15.03.2018 03.31.42)', 'xls');
  }

  showDocumentInPdf() {
    this.documentService.showDocumentInPdf(11, 'tn (15.03.2018 03.31.42)', 'xls')
      .then(res => { this.pageurl = res; })
      .catch(err => err.toString());
  }

}
